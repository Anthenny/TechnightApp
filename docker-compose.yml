version: "3"

services:
  node-app:
    build:
      context: backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./backend/:/app
      - /app/node_modules
    ports:
      - 5000:5000
    env_file:
      - ./backend/.env
    environment:
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    command: npm run dev # dit is niet productiewaardig, probeer een verschil te maken tussen dev en prod
    depends_on:
      - mongo 
  
  # TODO volumes fixen wanneer er een update is in de frontend wil ik dat de container ook update zodat deze veranderingen zichtbaar zijn
  frontend-dashboard:
    build: 
      context: frontend-dashboard
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./frontend-dashboard/:/frontend # ik zou hier /app van maken, kies 1 standaard en blijf die volgen
    ports:
      - 3000:3000
    command: npm run dev # dit is niet productiewaardig, probeer een verschil te maken tussen dev en prod
    depends_on:
      - mongo 
 
  mongo:
    image: mongo #todo versienummer expliciet, version pinning
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${DB_NAME}
    volumes:
      - mongo-db:/data/db
    
  mongo-express:
    image: mongo-express #todo versienummer expliciet, version pinning
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
   
  # TODO docker start met expo
  # frontend-app:
  #   container_name: frontend-app
  #   build:
  #     context: ../frontend
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - mongo


volumes:
  mongo-db:
